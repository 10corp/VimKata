*learnvim.txt*  A Suggested Path for Learning Vim

This help file is an attempt to outline a progressive set of topics for the
enthusiastic newcomer to study and practise.

==============================================================================
                                                *lv_B* *learnvim-Beginner*
COMPETENCIES ~

On completing this section, you will:

|lv_B_I|	Be able to use Vim's extensive help system.

|lv_B_II|	Know where to find fundamental information on using Vim.

|lv_B_III|	Know where the various configuration files for Vim are located and
		what each one is generally responsible for.

|lv_B_IV|	Know how to set options to control Vim's behaviour and
		customise its interface.

|lv_B_V|	Have created your own vimrc configuration file.

                                            *lv_B_I* *learnvim-Using-Help*
USING HELP ~

Vim's internal help system is comprehensive, well indexed and easy to
navigate. Beginners however often have difficulty knowing what to search for
in the first place. Two solutions to that problem are provided here. First is
a guided tour of how to use Vim's help system. Second is a broader way to
search for information within the help system.

Learning how to use Vim's Help: ~

|help.txt|		A quick overview of navigating Vim's help system.

|help-context|		A list of topic prepositions to specify the context of
			your help search.

|notation|		An explanation of how information is presented in the
			help files.

Broadening Your Search ~

Sometimes you don't know the exact search term you should be using to find what
you need in the help files. It can be frustrating trying to guess the precise
turn of phrase the help-file author tagged. Of course, it's obvious when you
get there, but just like a good joke: until you hear the punch-line, you would
never have guessed it would end like that.

To search the help system and return all matches, see the |:helpgrep| command.

------------------------------------------------------------------------------
Recipe: Using helpgrep to broaden your search ~

Problem: ~

You want to search by hexadecimal value, for example the character represented
by the value 0xAE (the Â® symbol). You've tried:

	:help hexadecimal
	:help hex
	:help search
	:help / and then searching within the help file for "hex"

If you had persisted in searching for subsequent matches in the last attempt,
you would have eventually found a table of |/character-classes| in which the
answer to your problem does indeed lie. In itself, that is not a bad thing,
and it really didn't take too long to find the answer. However, knowing that
you should have jumped into the help system with :help /character-classes is
by no means intuitive to the newcomer.

Solution: ~

	:helpgrep hex
	:cwindow
	/search

Produces: ~

version7.txt|1018 col 48| |/\%x| \%x1a		search for character with 2 pos. hex number
version7.txt|1020 col 50| |/\%u| \%u12ab	search for character with 4 pos. hex number
version7.txt|1022 col 53| |/\%U| \%U1234abcd	search for character with 8 pos. hex number

Comments: ~

Admittedly, the information in the version_n_.txt files would probably not be
your primary resource, but it gives a good answer in this case. The point is,
you can navigate the quickfix window for the answer you're seeking. All the
normal Vim navigation methods are available, including hjkl, ctrl-f/ctrl-b,
and the method used here, searching with /.

Note: Becuase this helpfile describes this process, the quickfix window will
have entries from here, and because 'learnvim' precedes 'version',
alphabetically, you will need to repeat your search several times (use the  n
key) to jump past the learnvim entries.

------------------------------------------------------------------------------
                                 *lv_B_II* *learnvim-Fundamental-Concepts*
THE FUNDAMENTALS OF VIM ~

|tutor|			The vimtutor is an interactive tutorial which teaches
			the fundamentals of Vim in around 30 minutes of
			hands-on fun.

|quickref|		Vim's Quick Reference:  An awesome overview and
			cheat-sheet.  Of particular interest are the
			|option-list|, text objects (|Q_to|) and pattern
			search summary (|Q_pa|).

|vim-modes|		Vim is a modal editor.  Understanding the consequences
			and advantages of that is essential to mastering Vim.
			Be sure to read the subsequent section on
			|mode-switching| too.

|user-manual|		The Table of Contents for Vim's User Manual.

Definitions ~

screen		The whole area that Vim uses to work in.  This can be a
		terminal emulator window.  Also called "the Vim window".

buffer		A buffer is just the word for the contents of a file.
                Each buffer may be associated with one file path (the
                file it will be written to when you :w).  A buffer may
                not have an associated file path (like the empty buffer
                you get when you first start Vim).

window		A window is a place where a buffer can be displayed.
                There is always at least one window open.  A buffer can
                be displayed in any number of windows simultaneously.
                Having a buffer that isn't displayed in a window is
                useful when switching between different tasks, letting
                you walk away from half-finished work.  Having a buffer
                that is displayed in two windows can be useful when
                trying to work on one part of the buffer based upon some
                context provided in another part of the buffer that's
                far away.

tab page	A tab page is a place to put a group of windows.
                There is always at least one tab page open.  Each tab
                must always have at least one window in it.  The maximum
                number of windows is bounded only by the size of the Vim
                window.

Note: Trying to create a one-to-one relationship between tab pages and buffers
is asking for trouble.  Lots of Vim commands change the buffer displayed in
the current window, and some others create a new window in the current tab
page.  Trying to lock a buffer to a single window inside a single tab page
won't work; at least, not without cutting you off from many useful commands.

------------------------------------------------------------------------------
                                     *lv_B_III* *learnvim-Configuring-Vim*
CONFIGURATION FILES ~

/etc/vim/vimrc		<<Explanation-Needed>>

/usr/share/vim/vimrc    <<Explanation-Needed>>

/usr/share/vim/gvimrc   <<Explanation-Needed>>

$HOME/.vimrc    <<Explanation-Needed>> See |learnvim-vimrc|

$HOME/.gvimrc   <<Explanation-Needed>> See |learnvim-vimrc|

------------------------------------------------------------------------------
                                              *lv_B_IV* *learnvim-Options*
CONFIGURATION OPTIONS ~

The |:options| command ...
See |options.txt|

------------------------------------------------------------------------------
                                                 *lv_B_V* *learnvim-vimrc*
MAKING YOUR PERSONAL CONFIGURATION PERSISTENT ~

Refer to or include godlygeek's resource on customising vim
(http://github.com/loota/vimfiles/blob/master/vim_usual_options.txt).

==============================================================================
CREDITS ~

Thanks to the good people at FreeNode#vim for patiently answering my questions
and their many great suggestions.

Special thanks to Zathrus for giving a detailed list of topics for this
tutorial.

The buffer, window and tab-page definitions were shamelessly copied from the
following resource created by godlygeek: http://vim.pastey.net/115548

==============================================================================
NOTES


*Zathrus*
configure vim
the biggest is probably properly configuring your vim -- a simple but highly
effective thing is to let vim take care of indenting and use ftplugins by
having "filetype indent plugin on" in your .vimrc and then don't try to set
the other indent options yourself

beyond that, tags, learning how to use buffers (:ls, :b #, :b name, bn, bp, ctrl-6, etc)
:bufdo, :windo, and :argdo are also very powerful for doing changes to massive numbers of files

:set hidden

text_objects

*jokajak*

macros

with a command that will fail, the macro aborts execution, so 1000@x will
allow you to run it until it can't (providing you give a good fail, like
moving down a line (so it doesn't wrap around the buffer and actually try to
execute 1000 times)).
jamessan says you can also make the macro recursive...?

*graywh* *ludwig*
the help system, and navigating the tags with ctrl-] and ctrl-t
:h help-context

:h key-notation
:h ins-completion

the gx commands
motion.txt
text-objects

variable scope (g: s: a:, etc)

:h filename-modifiers
:h expand()

 vim:noet:sw=8:nosmarttab:sts=0:tw=78:fo=tcq2:isk=!-~,^*,^\|,^\":ts=8:ft=help:norl:noro:modifiable:
